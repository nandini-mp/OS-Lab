[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 7; 

alias userSP R1;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) +13] =userSP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]* 512 -1;

alias fileDescriptor R3;
fileDescriptor = [[PTBR+2*((userSP-4)/512)]*512 + ((userSP-4)%512)];

alias retAddr R4;
retAddr = ([PTBR + 2*((userSP-1)/512)]*512) + ((userSP-1)%512);

alias addr R5;
addr = [[PTBR + 2*((userSP-3)/512)]*512 + ((userSP-3)%512)];

if(fileDescriptor != -1) then
	if(fileDescriptor<0 || fileDescriptor>7) then
		[retAddr] = -1;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	alias pprt R6;
	pprt = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512 + RESOURCE_TABLE_OFFSET + 2*fileDescriptor;
	
	if([pprt] != FILE) then
		[retAddr] = -1;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	alias oft_i R7;
	oft_i = [pprt + 1];
	alias oft_start R8;
	oft_start = OPEN_FILE_TABLE + oft_i*4;
	alias inode_i R9;
	inode_i = [oft_start];

	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
	R1 = ACQUIRE_INODE;
	R2 = inode_i;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call RESOURCE_MANAGER; // Mod 0
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);
	
	if(R0 == -1) then
		[retAddr] = -1;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	alias lseek R10;
	lseek = [oft_start + 2];

	if(inode_i==INODE_ROOT) then
		if(lseek == 480) then
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1 = RELEASE_INODE;
			R2 = inode_i;
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call RESOURCE_MANAGER; // Mod 0
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			[retAddr] = -2;
			[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
			SP = userSP;
			ireturn;
		endif;
		[[PTBR + 2*(addr/512)]*512 + (addr%512)] = [ROOT_FILE + lseek];
		[oft_start + 2] = lseek + 1;
	else
		if(lseek == [INODE_TABLE + inode_i*16 + 2]) then
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1 = RELEASE_INODE;
			R2 = inode_i;
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call RESOURCE_MANAGER; // Mod 0
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			[retAddr] = -2;
			[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
			SP = userSP;
			ireturn;
		endif;

		alias disk_block R6;
		disk_block = lseek/512;
		disk_block = [INODE_TABLE + inode_i*16 + 8 + disk_block];
		alias disk_offset R7;
		disk_offset = lseek%512;
		
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		R1 = BUFFERED_READ;
		R2 = disk_block;
		R3 = disk_offset;
		R4 = addr;
		call FILE_MANAGER;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		[oft_start + 2] = lseek + 1;
	
	endif;
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R1 = RELEASE_INODE;
	R2 = inode_i;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	[retAddr] = 0;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
	SP = userSP;
	ireturn;

	
else
    multipush(R1,R2,R3,R4,R5);
    R1=4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = addr;
	call MOD_4;
    multipop(R1,R2,R3,R4,R5);
    [retAddr] = 0;
endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16)+9] = 0;
SP = userSP;

ireturn;
