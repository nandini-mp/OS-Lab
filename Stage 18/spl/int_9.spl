alias userSP R0;
userSP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11])*512 - 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9;

alias nameOfFile R1;
nameOfFile = [([PTBR + 2*((userSP-4)/512)]*512) + ((userSP-4)%512)];

alias index R2;
alias inodeIndex R3;
alias searchRes R4;
index = 0;
inodeIndex = -1;
searchRes = 0;
while (index<60) do
	alias fileNameOnSearch R5;
	alias fileType R6;
	fileNameOnSearch = [INODE_TABLE + index*16 +1];
	fileType = [INODE_TABLE + index*16];
	if ((fileNameOnSearch == nameOfFile) && (fileType == 3)) then
		searchRes = 1;
		inodeIndex = index;
		break;
	endif;
	index = index + 1;
endwhile;

if (searchRes == 0) then
	alias physicalAddrRetVal R7;
	physicalAddrRetVal = [PTBR + 2*(userSP - 1)/512]*512 + (userSP - 1)%512;
	[physicalAddrRetVal]=-1;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
	SP = userSP;
	ireturn;
endif;

// Calling exit process
multipush(R0,R1,R2,R3,R4,R5,R6,R7);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R0,R1,R2,R3,R4,R5,R6,R7);

// Reclaiming user area page
alias userAreaPage R5;
userAreaPage = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11];
[MEMORY_FREE_LIST + userAreaPage] = [MEMORY_FREE_LIST + userAreaPage]+1;
[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] - 1;
SP = userAreaPage*512 - 1; //set SP to kernel stack of new process

alias i R8;
i = 0;
while (i<16) do
	[[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 + RESOURCE_TABLE_OFFSET + i] = -1;
	i = i+1;
endwhile;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 7] = inodeIndex;

PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20;
PTLR = 10;

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

multipush(R0,R1,R2,R3,R4,R5,R6,R7);
R1 = 1;
call MOD_2;
[PTBR + 4] = R0;
[PTBR + 5] = "0110";

call MOD_2;
[PTBR + 6] = R0;
[PTBR + 7] = "0110";

call MOD_2;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";

call MOD_2;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";
multipop(R0,R1,R2,R3,R4,R5,R6,R7);

alias numberOfCodePages R7;
numberOfCodePages = [INODE_TABLE + inodeIndex*16 +2]/512 + 1;
i = 0;
while (i<numberOfCodePages) do
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
	R1 = 1;
	call MOD_2;
	[PTBR + 8 + 2*i] = R0;
	[PTBR + 9 + 2*i] = "0100";
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
	i = i+1;
endwhile;

i = 0;
while (i<numberOfCodePages) do
	R5 = [PTBR + 8 + 2*i];
	R6 = [INODE_TABLE + inodeIndex*16 + 8 + i];
	multipush(R0,R1,R2,R3,R4,R7,R8);
	R1 = 2;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = R5;
	R4 = R6;
	call MOD_4;
	multipop(R0,R1,R2,R3,R4,R7,R8);
	i = i + 1;
endwhile;

[[PTBR + 16]*512] = [[PTBR+8]*512+1]; //PTBR + 16 is the stack, *512 gives the page, saves code page 8 * 512 + 1 means the entry point word
SP = 8*512;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
ireturn;

