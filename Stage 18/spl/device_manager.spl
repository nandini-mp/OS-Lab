alias functionNum R1;
alias currentPID R2;

if (functionNum==2) then
	multipush(R1,R2,R3,R4);
	R1 = 3;
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3,R4);
	[DISK_STATUS_TABLE + 1] = 0;
	[DISK_STATUS_TABLE + 2] = R3;
	[DISK_STATUS_TABLE + 3] = R4;
	load(R3,R4);
	[PROCESS_TABLE + 16*currentPID + 4] = WAIT_DISK;
	call MOD_5;
	return;
endif;

if (functionNum==3) then
	multipush(R1,R2,R3,BP);
	R1 = 8;
	R2 = [SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	multipop(R1,R2,R3,BP);
	print R3;
	multipush(R1,R2,R3,BP);
	R1 = 9;
	call MOD_0;
	R4 = R0;
	multipop(R1,R2,R3,BP);
	return;
endif;

if (functionNum==4) then
	multipush(R1,R2,R3,BP);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3,BP);
	read;
	[PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
	multipush(R1,R2,R3);
	call MOD_5;
	multipop(R1,R2,R3);
	alias physicalAddrVal R4;
	physicalAddrVal = [PAGE_TABLE_BASE + 20*currentPID + 2*(R3/512)]*512 + (R3%512);
	[physicalAddrVal] = [PROCESS_TABLE + currentPID*16 + 8];
	return;
endif;
return;
