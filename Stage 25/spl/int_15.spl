alias userSP R1;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) + 11]*512 - 1;

R3 = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) + 14]; //PTBR

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) + 9] = 21;

if(([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) + 1]!= 1) || ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) + 3]!=1)) then
	[[R3 + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1;
    	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1] * 16) + 9] = 0;
    	SP = userSP;
    	ireturn;
endif;


R1 = 5;
R2 = [SYSTEM_STATUS_TABLE+1];
call MOD_1;
alias i R2;
i = 0;
while (i<4) do
	if ([BUFFER_TABLE + 4*i + 1] == 1) then
		multipush(R1,R2,R3);
		R1 = 1;
		R2 = [SYSTEM_STATUS_TABLE +1];
		R3 = BUFFER_BASE + i;
		R4 = [BUFFER_TABLE + 4*i];
		call MOD_4;
		multipop(R1,R2,R3);
	endif;
	i=i+1;
endwhile;

//inode table
multipush(R1,R2,R3);
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 59;
R4 = 3;
call  MOD_4;
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 60;
R4 = 4;
call  MOD_4;
//root file
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 62;
R4 = 5;
call  MOD_4;
// disk free list
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 61;
R4 = 2;
call  MOD_4;
multipop(R1,R2,R3);

halt;
