alias functionNumber R1;

if (functionNumber == 1) then
	R0 = 0;
	while (R0<16) do
		if ([PROCESS_TABLE+16*R0+4]==TERMINATED) then
			[PROCESS_TABLE+16*R0+1] = R0;
			[PROCESS_TABLE+16*R0+4]=ALLOCATED;
			[PROCESS_TABLE+16*R0+14] = PAGE_TABLE_BASE + R0*20;
			[PROCESS_TABLE+16*R0+15] = 10;
			return;
		endif;
		R0=R0+1;
	endwhile;
	R0=-1;
	return;
endif;

if (functionNumber == 2) then
	alias PID R2;
	alias userAreaPage R3;
	R4 = [PROCESS_TABLE + 16*PID+11]*512+RESOURCE_TABLE_OFFSET;
	R5 = [PROCESS_TABLE + 16*PID+11]*512+512;
	while (R4<R5) do
		if ([R4]==SEMAPHORE) then
			multipush(R0,R1,R2,R3,R4,R5);
			R1 = 7;
			R2 = [R4+1];
			R3 = PID;
			call MOD_0;
			multipop(R0,R1,R2,R3,R4,R5);
		endif;
		if([R4] == FILE) then
			multipush(R0,R1,R2,R3,R4,R5);
			R3 = PID;
			R1 = CLOSE;
			R2 = [R4+1];
			call MOD_3;
			multipop(R0,R1,R2,R3,R4,R5);
        	endif;
        	R4 = R4+2;
    	endwhile;
	userAreaPage = [PROCESS_TABLE + PID*16 + 11];
	multipush(R1,R2,R3);
	R1 = 2;
	R2 = userAreaPage;
	call MOD_2;
	multipop(R1,R2,R3);
	return;
endif;

if (functionNumber == 3) then
	alias PID R2;
	if ([PROCESS_TABLE + PID*16 + 9] != 9) then
		alias i R4;
		i = 0;
		while (i<16) do
			if ([PROCESS_TABLE+i*16+4] == WAIT_PROCESS && [PROCESS_TABLE+i*16+5] == PID) then
				[PROCESS_TABLE+i*16+4] = READY;
				[PROCESS_TABLE+i*16+5] = -1;
			endif;
			i = i+1;
		endwhile;
		i = 0;
		while (i<16) do
			if ([PROCESS_TABLE+16*i+2] == PID) then
				[PROCESS_TABLE+16*i+2] = -1;
			endif;
			i=i+1;
		endwhile;
	endif;
	multipush(R1,R2);
	R1 = 4;
	R2 = PID;
	call MOD_1;
	R1 = 2;
	call MOD_1;
	multipop(R1,R2);
	[PROCESS_TABLE + PID*16 + 4] = TERMINATED;
	return;	
endif;

if (functionNumber == 4) then
	alias PID R2;	
	[[PROCESS_TABLE + PID*16 + 14] + 0] = -1;
	[[PROCESS_TABLE + PID*16 + 14] + 1] = "0000";
	[[PROCESS_TABLE + PID*16 + 14] + 2] = -1;
	[[PROCESS_TABLE + PID*16 + 14] + 3] = "0000";
	R3 = 4;
	R4 = [PROCESS_TABLE + PID*16 + 14];
	while (R3<20) do
		if ([R4+R3]!=-1) then
			multipush(R0,R1,R2,R3,R4);
			R1 = 2;
			R2 = [R3+R4];
			call MOD_2;
			multipop(R0,R1,R2,R3,R4);
		endif;
		[R3+R4+0] = -1;
		[R3+R4+1] = "0000";
		R3 = R3+2;
	endwhile;
	
	R4 = 2;
	R5 = PID;
	while (R4<=3) do
		if ([DISK_MAP_TABLE+PID*10+R4]!=-1) then
			multipush(R1,R2,R3);
			R3 = R5;
			R1 = 4;
			R2 = [DISK_MAP_TABLE + R5*10+R4];
			call MOD_2;
			multipop(R1,R2,R3);
		endif;
		
		if ([DISK_MAP_TABLE+PID*10+R4+6]!=-1) then
			multipush(R1,R2,R3);
			R3 = R5;
			R1 = 4;
			R2 = [DISK_MAP_TABLE + R5*10+R4+6];
			call MOD_2;
			multipop(R1,R2,R3);
		endif;
		R4 = R4+1;
	endwhile;
	
	alias i R3;
	while (i<10) do
		[DISK_MAP_TABLE+PID*10+i] = -1;
		i=i+1;
	endwhile;
	return;
endif;

if (functionNumber == 5) then
	alias currentPID R2;
	alias i R3;
	i=0;
	while (i<MAX_FILE_NUM) do
		if ([INODE_TABLE + 16*i + 1]!=-1) then
			multipush(R1,R2,R3);
			R1 = 4;
			R2 = i;
			R3 = currentPID;
			call MOD_0;
			multipop(R1,R2,R3);
		endif;
		i=i+1;
	endwhile;
	
	i=2;
	while (i<MAX_PROC_NUM) do
		if ([PROCESS_TABLE+16*i+1]!=[SYSTEM_STATUS_TABLE+1] && [PROCESS_TABLE + 16*i + 4]!=TERMINATED) then
			multipush(R1,R2,R3);
			R1 = 3;
			R2 = i;
			call MOD_1;
			multipop(R1,R2,R3);
		endif;
		i=i+1;
	endwhile;
	
	i=0;
	while (i<MAX_FILE_NUM) do
		if ([INODE_TABLE + 16*i + 1]!=-1) then
			multipush(R1,R2,R3);
			R1 = 5;
			R2 = i;
			R3 = currentPID;
			call MOD_0;
			multipop(R1,R2,R3);
		endif;
		i=i+1;
	endwhile;
	return;
endif;

return;
