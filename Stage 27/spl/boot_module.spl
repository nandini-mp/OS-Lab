//Exception
loadi(2,15);
loadi(3,16);
//TIMER
loadi(4,17);
loadi(5,18);
//disk interrupt int 2
loadi(6,19);
loadi(7,20);
//console interrupt handler int 3
loadi(8,21);
loadi(9,22);
//INT 4
loadi(10,23);
loadi(11,24);
//INT 5
loadi(12,25);
loadi(13,26);
//INT 6
loadi(14,27);
loadi(15,28);
//INT 7
loadi(16,29);
loadi(17,30);
//INT 8
loadi(18,31);
loadi(19,32);
//INT 9
loadi(20,33);
loadi(21,34);
//INT 10
loadi(22,35);
loadi(23,36);
//INT 11
loadi(24,37);
loadi(25,38);
//INT 12
loadi(26,39);
loadi(27,40);
//INT 13
loadi(28,41);
loadi(29,42);
//INT 14
loadi(30,43);
loadi(31,44);
//INT 15
loadi(32,45);
loadi(33,46);
//INT 16
loadi(34,47);
loadi(35,48);
//INT 17
loadi(36,49);
loadi(37,50);
//mod 0
loadi(40,53);
loadi(41,54);
//mod  1
loadi(42,55);
loadi(43,56);
//mod 2
loadi(44,57);
loadi(45,58);
//mod 3
loadi(46,59);
loadi(47,60);
//mod 4
loadi(48,61);
loadi(49,62);
//mod 5
loadi(50,63);
loadi(51,64);
//inode table+user table
loadi(59,3);
loadi(60,4);
//root file
loadi(62,5);
//lib code
loadi(63,13);
loadi(64,14);
//init -- LOGIN
loadi(65,7);
// loadi(66,8);
//SHELL
loadi(67,9);
loadi(68,10);

//Load the Disk Free List from the disk block 2 to the memory page 61.
loadi(61,2);

//INIT PROCESS WITH PID=1
//PAGE TABLE
PTBR= PAGE_TABLE_BASE+20;
PTLR=10;

//lib
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100"; 
//heap
[PTBR+4] = -1;
[PTBR+5] = "0000"; 
[PTBR+6] = -1;
[PTBR+7] = "0000"; 
//code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000"; 
[PTBR+14] = -1;
[PTBR+15] = "0000"; 
//stack
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

//Process Table

[PROCESS_TABLE + 27] = 77;
[PROCESS_TABLE + 17] = 1;
[PROCESS_TABLE + 29] = 8*512;
[PROCESS_TABLE + 20] = CREATED;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 30] = PTBR;
[PROCESS_TABLE + 31] = 10;

//PER PROCEESS RESOURCE TABLE
R1=78*512-16;    //496=511-16+1
while(R1<78*512) do
    [R1]=-1;
    R1=R1+1;
endwhile;

[66*512] = [65*512 + 1]; //IP in stack

//SHELL -- PID 2
//PAGE TABLE
PTBR= PAGE_TABLE_BASE+40;
PTLR=10;

//lib
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100"; 
//heap
[PTBR+4] = -1;
[PTBR+5] = "0000"; 
[PTBR+6] = -1;
[PTBR+7] = "0000"; 
//code
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000"; 
[PTBR+14] = -1;
[PTBR+15] = "0000"; 
//stack
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

//Process Table

[PROCESS_TABLE + 16*2+11] = 80;
[PROCESS_TABLE + 16*2+1] = 2;
[PROCESS_TABLE + 16*2+2] = 1;//PARENT  is  login
[PROCESS_TABLE + 16*2+13] = 8*512;
[PROCESS_TABLE + 16*2+4] = TERMINATED;
[PROCESS_TABLE + 16*2+12] = 0;
[PROCESS_TABLE + 16*2+14] = PTBR;
[PROCESS_TABLE + 16*2+15] = 10;

//PER PROCEESS RESOURCE TABLE
R1=81*512-16;    //496=511-16+1
while(R1<81*512) do
    [R1]=-1;
    R1=R1+1;
endwhile;

[78*512] = [67*512 + 1]; //IP in stack

//PER ROCESS DISK MAP TABLE
R1=0;
while(R1<10)	do
	[DISK_MAP_TABLE+20+R1]=-1;
	R1=R1+1;
endwhile;
[DISK_MAP_TABLE+20+4]=9;
[DISK_MAP_TABLE+20+5]=10;


//Mem Free List
//initialise to 0
R1=0;				//reserved for OS
while(R1<=75) do 	
	[57*512+R1]=1;
	R1=R1+1;
endwhile;
R1=76;				//free  pages
while(R1<=127) do 	
	[57*512+R1]=0;
	R1=R1+1;
endwhile;
R1=76;
while(R1<=80) do
	[57*512+R1]=1;
	R1=R1+1;
endwhile;

//Initialize the fields WAIT_MEM_COUNT to 0 and MEM_FREE_COUNT to number of free pages in the system status table.
[SYSTEM_STATUS_TABLE+2]=47;
[SYSTEM_STATUS_TABLE+3]=0;

[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;

//Process table entries of other processes
alias id R1;
id=2;
while(id<=15)	do
	[PROCESS_TABLE + 16*id + 4] = TERMINATED;
	id = id+1;
endwhile;

//Semaphore Table
R1=SEMAPHORE_TABLE;
R2=SEMAPHORE_TABLE+128;
while(R1<R2)do  //32  semaphores* 4
	[R1]=-1;
	[R1+1]=0;
	R1=R1+4;
endwhile;

//file status table
R1=FILE_STATUS_TABLE;
R2=FILE_STATUS_TABLE + 4*MAX_FILE_NUM; 
while(R1<R2)do
	[R1]=-1;	//locking pid
	[R1+1]=-1;	//file open count
	R1=R1+4;
endwhile;

//buffer table
R1=BUFFER_TABLE;
R2=BUFFER_TABLE+4*MAX_BUFFER;
while(R1<R2)do
	[R1]=-1;	//block no
	[R1+1]=0;	//dirty bit
	[R1+2]=-1;	//LOCKING PID
	R1=R1+4;
endwhile;

// Initialize all entries of the open file table 
// by setting INODE INDEX field to -1 
// and OPEN INSTANCE COUNT field to 0
R1 = OPEN_FILE_TABLE;
R2 = OPEN_FILE_TABLE + 4*32;
while(R1<R2) do
	[R1] = -1; 		// inode index
	[R1+1] = 0;		// open instance count
	
	R1 = R1+4; 
endwhile;

//userid of init set to root(1)
[PROCESS_TABLE + 16 + 3] = 1;
return;
