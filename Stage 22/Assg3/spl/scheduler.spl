[TERMINAL_STATUS_TABLE+2] = [TERMINAL_STATUS_TABLE+2]+1;

alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

multipush(BP);

alias processTableEntry R1;
processTableEntry = PROCESS_TABLE + currentPID*16;

[processTableEntry+ 12] = SP%512;
[processTableEntry + 14] = PTBR;
[processTableEntry + 15] = PTLR;

alias newPID R2;
alias nextPID R3;
alias nextStatus R4;

nextPID = currentPID + 1;
while ((nextPID%16)!=currentPID) do
	nextStatus = [PROCESS_TABLE + (nextPID%16)*16 + 4];
	if ((nextStatus == READY) || (nextStatus == CREATED)) then
		newPID = nextPID%16;
		break;
	endif;
	nextPID = nextPID + 1;
endwhile;

if (nextPID%16 == currentPID) then
	newPID = 0;
endif;

[SYSTEM_STATUS_TABLE+24] = [SYSTEM_STATUS_TABLE+24]+1; //context switch

alias newProcessTable R5;
newProcessTable = PROCESS_TABLE + (newPID*16);

SP = [newProcessTable+11]*512 + [newProcessTable+12];
PTBR = [newProcessTable + 14];
PTLR = [newProcessTable + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

if ([newProcessTable+4] == CREATED) then
	SP = [newProcessTable + 13];
	BP = [[newProcessTable+11]*512];
	[newProcessTable + 4] = RUNNING;
	[newProcessTable + 9] = 0;
	ireturn;
endif;

[newProcessTable + 4] = RUNNING;

multipop(BP);

return;
